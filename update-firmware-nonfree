#!/usr/bin/env python3

#######################################################################
# This file is part of flni.
#
# Copyright (C) 2021 by Jesse Rhodes.
#
# flni is distributed under the MIT license.  See the file
# LICENSE for distribution details.
#######################################################################


import sys

import flni
import config

module_dir = "/usr/local/lib/flni/modules"  # Proper python packaging will arrive with version 0.2
sys.path.append(module_dir)

usage = """
        Usage: update-firmware-nonfree [options] <arguments>\n
        Options:
        --check             Check local and upstream firmware versions only.
        --install           Download and install latest firmware from kernel.org.
        --version YYYYMMDD  Download and install specified firmware release from kernel.org.
        --uninstall         Remove previously installed firmware.
        --help              This usage text.
        """

opts = [opt for opt in sys.argv[1:] if opt.startswith("--")]


if "--install" in opts:
    pass
elif "--check" in opts:
    flni.check_local()
    flni.get_latest_firmware()
    exit()
elif "--version" in opts:
    print("Specifying version not yet supported.")
    exit()
elif "--uninstall" in opts:
    flni.uninstall()
    exit()
elif "--help" in opts:
    print(usage)
    exit()
else:
    raise SystemExit(usage)


# Set up the environment
temp_flni = flni.setup()
firmware_latest = flni.get_latest_firmware()

# Do we even need to run?
flni.check_installed(firmware_latest, temp_flni)

# We got this far, so here are our filenames
tarball_gz = "linux-firmware-" + firmware_latest + ".tar.gz"
signature = "linux-firmware-" + firmware_latest + ".tar.asc"
tarball = "linux-firmware-" + firmware_latest + ".tar"

print("We will now download " + tarball_gz + " and verify it with " + signature + ".")
confirm = input(
    "The firmware files will then be installed to "
    + config.firmwaredir
    + ". Does this look right? (Y/N)"
)

if confirm == "Y" or confirm == "y":
    pass
else:
    flni.cleanup(temp_flni)
    exit("Install aborted.")


flni.download(tarball_gz, tarball, signature)
flni.verify(tarball, signature, temp_flni)
flni.install(tarball, firmware_latest, temp_flni)
flni.cleanup(temp_flni)
